<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>본선통합배차 자동프로그램</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/shorthandcss@1.1.1/dist/shorthand.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Muli:200,300,400,500,600,700,800,900&display=swap" />
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css" />
    <link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick-theme.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Jua&display=swap" rel="stylesheet">
    <style>

    body {
        font-family: 'Muli', sans-serif;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(135deg, #ffffff 70%, #8f71d8 100%);
    }

        .container {
            width: 350px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            overflow: hidden;
        }

        .section {
            padding: 20px;
            border-bottom: 1px solid #ddd;
        }

        .section:last-child {
            border-bottom: none;
        }

        .title {
            font-size: 1.5em;
            margin-bottom: 18px;
            font-weight: bold;
            text-align: center;
        }

        .row {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
        }

        .cell {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            text-align: center;
            background-color: #f9f9f9;
        }

        .cell.header {
            font-weight: bold;
            background-color: #f0f0f0;
        }

        .btn {
            width: calc(100% - 20px);
            padding: 10px;
            margin: 10px 10px 0 10px;
            border: none;
            border-radius: 5px;
            background-color: #87e795;
            color: white;
            cursor: pointer;
            text-align: center;
            font-size: 20px;
            font-family: 'Jua', sans-serif;
        }

        .btn:hover {
            background-color: #0056b3;
        }

        .btn2 {
            width: calc(100% - 20px);
            padding: 10px;
            margin: 10px 10px 0 10px;
            border: none;
            border-radius: 5px;
            background-color: #ee7b89;
            color: white;
            cursor: pointer;
            text-align: center;
            font-size: 20px;
            font-family: 'Jua', sans-serif;
        }

        .btn2:hover {
            background-color: #d72727;
        }

        .title-highlight {
            background: linear-gradient(135deg, #ffcc80, #ffb74d);
            color: white;
            padding: 5px 10px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: inline-block;
        }

        .blinking-text {
            animation: blinking 2s infinite;
            animation-timing-function: ease-in-out;
        }

        @keyframes blinking {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0;
            }
        }

        h2 {
            font-size: 1.3em;
            margin-bottom: 15px;
            font-weight: bold;
            text-align: center;
        }

        .center-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 50px;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- 현재 배차 -->
        <div class="section" id="current">
            <div class="center-container">
                <h2 class="title-highlight">본선통합배차</h2>
            </div>
            <div class="title blinking-text">현재 배차</div>
            <div class="row">
                <div class="cell header">구간</div>
            </div>
            <div class="row">
                <div class="cell" id="SANG_HA"><%= currentData.SANG_HA %></div>
            </div>
            <div class="row">
                <div class="cell header">컨테이너</div>
                <div class="cell header">규격</div>
            </div>
            <div class="row">
                <div class="cell" id="CON_NO"><%= currentData.CON_NO %></div>
                <div class="cell"><%= currentData.CON_KU %></div>
            </div>
            <div class="row">
                <div class="cell header">중량</div>
                <div class="cell header">하불</div>
            </div>
            <div class="row">
                <div class="cell"><%= currentData.CON_KG %></div>
                <div class="cell"><%= currentData.B_KUM_IN %></div>
            </div>
            <div class="row">
                <div class="cell header">온도</div>
                <div class="cell header">위험물코드</div>
            </div>
            <div class="row">
                <div class="cell"><%= currentData.CON_TEMP %></div>
                <div class="cell"><%= currentData.CON_CLASS %></div>
            </div>
            <div class="row">
                <button class="btn2" id="endDriving2">운행종료</button>
                <button class="btn" id="copino">전송요청</button>
            </div>
            <div class="row">
                <button class="btn2" id="loadingComplete">상차완료</button>
                <button class="btn" id="unloadingComplete" style="display: none;">하차완료</button>
            </div>
        </div>
    

        <!-- 다음 배차 -->
        <div class="section" id="nextDispatchSection" style="display: none;">
            <div class="title blinking-text">다음 배차</div>
            <div class="row">
                <div class="cell header">구간</div>
            </div>
            <div class="row">
                <div class="cell" id="SANG_HA2"></div>
            </div>
            <div class="row">
                <div class="cell header">컨테이너</div>
                <div class="cell header">규격</div>
            </div>
            <div class="row">
                <div class="cell" id="CON_NO2"></div>
                <div class="cell" id="CON_KU2"></div>
            </div>
            <div class="row">
                <button class="btn" id="copino2">전송요청</button>
            </div>
            <div class="row">
                <button class="btn2" id="endDriving">운행종료</button>
                <button class="btn" id="startNextBatch">다음배차시작</button>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
    
        socket.on('connect', () => {
            // 서버로 세션 ID 전달
            const sessionID = '<%= sessionID %>';
            socket.emit('registerSession', sessionID);
        });

        socket.on('forceLogout', () => {
            alert('다른 PC에서 로그인되었습니다. 메인화면으로 이동합니다.');
            window.location.href = '/';
        });
    </script>

    <script>



document.addEventListener('DOMContentLoaded', function() {
    console.log("JavaScript 코드가 로드되었습니다.");

    let currentTotal;
    let sasiValue;
    let isUnloadingComplete = false; // 하차완료 여부를 확인하는 플래그 변수
    let loadingCompleteTimeout;
    let unloadingCompleteTimeout;

    function fetchCurrentTotal() {
        fetch('/get-current-data')
        .then(response => response.json())
        .then(data => {
            if (data && data.assignedTotal !== undefined && data.currentData && data.currentData.SASI !== undefined) {
                currentTotal = data.assignedTotal;
                sasiValue = data.currentData.SASI;
                console.log(`현재 TOTAL 값: ${currentTotal}`);
                console.log(`현재 SASI 값: ${sasiValue}`);
            } else {
                console.error('TOTAL 또는 SASI 값이 설정되지 않았습니다.', data);
                alert('TOTAL 또는 SASI 값이 설정되지 않았습니다.');
            }
        })
        .catch(error => {
            console.error('데이터 가져오기 중 오류:', error);
            alert('TOTAL 또는 SASI 값이 설정되지 않았습니다.');
        });
    }

    // 페이지 로드 시 현재 TOTAL 값 불러오기
    fetchCurrentTotal();

    // 상차완료 버튼 클릭 이벤트 처리
    document.getElementById('loadingComplete').addEventListener('click', function() {
        if (!currentTotal || !sasiValue) {
            console.error('currentTotal 또는 SASI 값이 설정되지 않았습니다.');
            alert('TOTAL 또는 SASI 값이 설정되지 않았습니다.');
            return;
        }

        clearTimeout(loadingCompleteTimeout); // 상차완료 타이머 클리어

        fetch('/calculate-next-dispatch', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ currentTotal, SASI: sasiValue })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('SANG_HA2').innerText = data.nextDispatch.SANG_HA;
                document.getElementById('CON_NO2').innerText = data.nextDispatch.CON_NO;
                document.getElementById('CON_KU2').innerText = data.nextDispatch.CON_KU;
                document.getElementById('nextDispatchSection').style.display = 'block';

                document.getElementById('endDriving2').style.display = 'none';
                document.getElementById('loadingComplete').style.display = 'none';
                document.getElementById('unloadingComplete').style.display = 'block';

                isUnloadingComplete = false; // 다음 배차를 위해 초기화

                // 하차완료 타이머 시작 (2시간)
                unloadingCompleteTimeout = setTimeout(function() {
                    endDriving();
                }, 2 * 60 * 60 * 1000); // 2시간 후 실행
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('다음 배차 계산 중 오류 발생:', error);
        });
    });

    document.getElementById('unloadingComplete').addEventListener('click', function() {
        console.log("하차 완료 버튼 클릭됨.");
        const conNo = document.getElementById('CON_NO').innerText.trim();

        fetch('/api/update-ha-work', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ conNo: conNo, status: '완료' })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('하차 완료 업데이트 성공:', data);
                isUnloadingComplete = true; // 하차 완료 상태 설정
                alert('하차 완료 처리 되었습니다.');
            } else {
                console.error('하차 완료 업데이트 실패:', data.message);
                alert('하차 완료 실패: ' + data.message);
            }
        })
        .catch(error => {
            console.error('하차 완료 업데이트 중 오류 발생:', error);
            alert('하차 완료 업데이트 중 오류 발생.');
        });
    });
    document.getElementById('endDriving2').addEventListener('click', function() {
        if (confirm("운행을 정말 종료하시겠습니까?")) {
            console.log("운행종료 버튼 클릭됨.");
            const CON_NO = document.getElementById('CON_NO').innerText.trim();
            if (!CON_NO) {
                console.error('CON_NO 값이 설정되지 않았습니다.');
                alert('CON_NO 값이 설정되지 않았습니다.');
                return;
            }

            fetch('/end-driving', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ CON_NO })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/LOGIN';
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('운행 종료 중 오류 발생:', error);
            });
        }
    });

    document.getElementById('endDriving').addEventListener('click', function() {
        if (!isUnloadingComplete) {
            alert("하차완료 후 가능합니다");
            return;
        }

        if (confirm("운행을 정말 종료하시겠습니까?")) {
            console.log("운행종료 버튼 클릭됨.");
            const CON_NO = document.getElementById('CON_NO2').innerText.trim();
            if (!CON_NO) {
                console.error('CON_NO 값이 설정되지 않았습니다.');
                alert('CON_NO 값이 설정되지 않았습니다.');
                return;
            }

            fetch('/end-driving', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ CON_NO })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '/LOGIN';
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('운행 종료 중 오류 발생:', error);
            });
        }
    });

    document.getElementById('startNextBatch').addEventListener('click', function() {
        if (!isUnloadingComplete) {
            alert("하차완료 후 가능합니다");
            return;
        }

        console.log("다음 배차 시작 버튼 클릭됨.");

        if (confirm("다음 배차로 이동하시겠습니까?")) {
            const nextData = {
                SANG_HA: document.getElementById('SANG_HA2').innerText.trim(),
                CON_NO: document.getElementById('CON_NO2').innerText.trim(),
                CON_KU: document.getElementById('CON_KU2').innerText.trim()
            };

            fetch('/start-next-batch', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(nextData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('다음 배차 페이지로 이동합니다.');
                    window.location.href = '/driver4';
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('다음 배차 설정 중 오류 발생:', error);
            });
        }
    });

    // 상차완료 타이머 시작 (2시간)
    loadingCompleteTimeout = setTimeout(function() {
        endDriving();
    }, 2 * 60 * 60 * 1000); // 2시간 후 실행

    let sessionTimeout;

    function resetSessionTimeout() {
        clearTimeout(sessionTimeout);
        sessionTimeout = setTimeout(() => {
            alert('오랜 시간 활동이 없어 로그아웃됩니다.');
            window.location.href = '/';
        }, 5 * 60 * 60 * 1000); // 5시간 타임아웃 설정
    }

    // 페이지 로드 시와 사용자 활동 시 타이머 리셋
    window.onload = resetSessionTimeout;
    document.onmousemove = resetSessionTimeout;
    document.onkeypress = resetSessionTimeout;
});

document.addEventListener('DOMContentLoaded', function() {
    const conNoElement = document.getElementById('CON_NO');
    const sangHaElement = document.getElementById('SANG_HA');

    if (!conNoElement || !sangHaElement) {
        console.error('CON_NO 또는 SANG_HA 요소를 찾을 수 없습니다.');
        return;
    }

    const conNo = conNoElement.innerText.trim();
    const sangHa = sangHaElement.innerText.trim();

    console.log('요청 데이터:', {
        conNo: conNo,
        sangHa: sangHa
    });

    fetch('/api/insert-log', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            conNo: conNo,
            sangHa: sangHa
        })
    })
    .then(response => {
        console.log('응답 상태 코드:', response.status);
        return response.json(); // JSON으로 변환하여 다음 .then으로 전달
    })
    .then(data => {
        console.log('응답 데이터:', data);
        if (data.success) {
            console.log('로그 삽입 성공:', data);
        } else {
            console.error('로그 삽입 실패:', data.message);
        }
    })
    .catch(error => {
        console.error('로그 삽입 중 오류 발생:', error);
    });
});



document.getElementById('loadingComplete').addEventListener('click', function() {
    const conNo = document.getElementById('CON_NO').innerText.trim();

    fetch('/api/update-sang-work', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ conNo: conNo, status: '완료' })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('상차 완료 업데이트 성공:', data);
        } else {
            console.error('상차 완료 업데이트 실패:', data.message);
        }
    })
    .catch(error => {
        console.error('상차 완료 업데이트 중 오류 발생:', error);
    });
});


document.getElementById('copino').addEventListener('click', function() {
    if (confirm("전송하시겠습니까?")) {  // 확인창을 표시
        console.log("copino 버튼 클릭됨");
        const conNo = document.getElementById('CON_NO').innerText.trim();

        if (!conNo) {
            console.error('CON_NO 값이 설정되지 않았습니다.');
            alert('CON_NO 값이 설정되지 않았습니다.');
            return;
        }

        fetch('/api/send-data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ conNo: conNo })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('전송요청이 완료되었습니다. 전송 확인 후 출발하세요.');
            } else {
                alert('데이터 전송 실패: ' + data.message);
            }
        })
        .catch(error => {
            console.error('데이터 전송 중 오류 발생:', error);
        });
    } else {
        console.log("전송 요청이 취소되었습니다.");
    }
});

document.getElementById('copino2').addEventListener('click', function() {
    if (confirm("전송하시겠습니까?")) {  // 확인창을 표시
        console.log("copino2 버튼 클릭됨");
        const conNo2 = document.getElementById('CON_NO2').innerText.trim();

        if (!conNo2) {
            console.error('CON_NO2 값이 설정되지 않았습니다.');
            alert('CON_NO2 값이 설정되지 않았습니다.');
            return;
        }

        fetch('/api/send-data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ conNo: conNo2 })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('전송요청이 완료되었습니다. 전송 확인 후 출발하세요.');
            } else {
                alert('데이터 전송 실패: ' + data.message);
            }
        })
        .catch(error => {
            console.error('데이터 전송 중 오류 발생:', error);
        });
    } else {
        console.log("전송 요청이 취소되었습니다.");
    }
});





    document.getElementById('loadingComplete').addEventListener('click', function() {
    const newLocation = document.getElementById('SANG_HA').innerText.trim(); // 업데이트할 위치 데이터 가져오기

    fetch('/api/update-current-location', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ newLocation })
    })
    .then(response => response.json())
    .then(data => {

    })
    .catch(error => {
        console.error('CURRENT_LOCATION 업데이트 중 오류 발생:', error);
        alert('업데이트 중 오류가 발생했습니다.');
    });
});

document.getElementById('loadingComplete').addEventListener('click', function() {
    // nextDispatchSection을 보이게 합니다.
    document.getElementById('nextDispatchSection').style.display = 'block';

    // 일정 시간 지연 후 SANG_HA와 SANG_HA2의 값을 비교합니다.
    setTimeout(function() {
        const sangHaText = document.getElementById('SANG_HA').innerText.trim();
        const sangHa2Text = document.getElementById('SANG_HA2').innerText.trim();

        console.log("SANG_HA 값:", sangHaText);
        console.log("SANG_HA2 값:", sangHa2Text);

        // 두 텍스트 값이 있는지 확인하고, "-" 뒤의 글자를 비교
        if (sangHaText && sangHa2Text) {
            const sangHaSuffix = sangHaText.split('-').pop();
            const sangHa2Suffix = sangHa2Text.split('-').pop();

            console.log("SANG_HA 접미사:", sangHaSuffix);
            console.log("SANG_HA2 접미사:", sangHa2Suffix);

            // 두 접미사가 같으면 copino2 버튼 숨기기
            if (sangHaSuffix === sangHa2Suffix) {
                console.log("접미사가 일치하여 copino2 버튼을 숨깁니다.");
                document.getElementById('copino2').style.display = 'none';
            } else {
                console.log("접미사가 일치하지 않습니다.");
            }
        } else {
            console.log("SANG_HA 또는 SANG_HA2 값이 존재하지 않습니다.");
        }
    }, 500); // 0.5초(500ms) 지연
});












</script>
</body>
</html>
